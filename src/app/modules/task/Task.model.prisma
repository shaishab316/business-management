model Task {
  id                       String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  status                   ETaskStatus @default(PENDING)
  campaignId               String      @db.ObjectId
  campaign                 Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  duration                 DateTime
  influencerId             String      @db.ObjectId
  influencer               User        @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  influencerAgreementProof String?
  postLink                 String?
  screenshot               String?
  matrix                   Json?
  budget                   Float
  isPaymentDone            Boolean     @default(false)
  isTimeout                Boolean     @default(false)
  isRevision               Boolean     @default(false)

  paymentStatus EPaymentStatus @default(PENDING)
  Payment       Payment[]

  @@map("tasks")
}

enum ETaskStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCEL
}
